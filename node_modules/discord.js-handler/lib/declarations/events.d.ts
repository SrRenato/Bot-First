import { Channel, Emoji, Guild, User, GuildMember, Message, Collection, Snowflake, MessageReaction, Role, TextChannel, Invite, RateLimitData, CloseEvent } from 'discord.js';
import { GenericUtils, CallbackType } from './main';
declare type ImportCommandsType = (prefix: string, message: Message) => Promise<void>;
declare type GenericEventName = string;
declare type GenericEventRunnable = (utils: GenericUtils, ...params: never[]) => CallbackType;
export declare abstract class GenericEvent<T extends GenericEventName = GenericEventName, U extends GenericEventRunnable = GenericEventRunnable> {
    name: T;
    abstract listener: U;
}
declare type ChannelCreateEvent = GenericEvent<'channelCreate', (utils: GenericUtils, channel: Channel) => CallbackType>;
declare type ChannelDeleteEvent = GenericEvent<'channelDelete', (utils: GenericUtils, channel: Channel) => CallbackType>;
declare type ChannelPinsUpdateEvent = GenericEvent<'channelPinsUpdate', (utils: GenericUtils, channel: Channel, time: Date) => CallbackType>;
declare type ChannelUpdateEvent = GenericEvent<'channelUpdate', (utils: GenericUtils, oldChannel: Channel, newChannel: Channel) => CallbackType>;
declare type DebugEvent = GenericEvent<'debug', (utils: GenericUtils, info: string) => CallbackType>;
declare type DisconnectEvent = GenericEvent<'disconnect', (utils: GenericUtils) => CallbackType>;
declare type EmojiCreateEvent = GenericEvent<'emojiCreate', (utils: GenericUtils, emoji: Emoji) => CallbackType>;
declare type EmojiDeleteEvent = GenericEvent<'emojiDelete', (utils: GenericUtils, emoji: Emoji) => CallbackType>;
declare type EmojiUpdateEvent = GenericEvent<'emojiUpdate', (utils: GenericUtils, oldEmoji: Emoji, newEmoji: Emoji) => CallbackType>;
declare type ErrorEvent = GenericEvent<'error', (utils: GenericUtils, error: Error) => CallbackType>;
declare type GuildBanAddEvent = GenericEvent<'guildBanAdd', (utils: GenericUtils, guild: Guild, user: User) => CallbackType>;
declare type GuildBanRemoveEvent = GenericEvent<'guildBanRemove', (utils: GenericUtils, guild: Guild, user: User) => CallbackType>;
declare type GuildCreateEvent = GenericEvent<'guildCreate', (utils: GenericUtils, guild: Guild) => CallbackType>;
declare type GuildDeleteEvent = GenericEvent<'guildDelete', (utils: GenericUtils, guild: Guild) => CallbackType>;
declare type GuildMemberAddEvent = GenericEvent<'guildMemberAdd', (utils: GenericUtils, member: GuildMember) => CallbackType>;
declare type GuildMemberAvailableEvent = GenericEvent<'guildMemberAvailable', (utils: GenericUtils, member: GuildMember) => CallbackType>;
declare type GuildMemberRemoveEvent = GenericEvent<'guildMemberRemove', (utils: GenericUtils, member: GuildMember) => CallbackType>;
declare type GuildMembersChunkEvent = GenericEvent<'guildMembersChunk', (utils: GenericUtils, members: GuildMember[], guild: Guild) => CallbackType>;
declare type GuildMemberSpeakingEvent = GenericEvent<'guildMemberSpeaking', (utils: GenericUtils, member: GuildMember, speaking: boolean) => CallbackType>;
declare type GuildMemberUpdateEvent = GenericEvent<'guildMemberUpdate', (utils: GenericUtils, oldMember: GuildMember, newMember: GuildMember) => CallbackType>;
declare type GuildUnavailableEvent = GenericEvent<'guildUnavailable', (utils: GenericUtils, guild: Guild) => CallbackType>;
declare type GuildUpdateEvent = GenericEvent<'guildUpdate', (utils: GenericUtils, oldGuild: Guild, newGuild: Guild) => CallbackType>;
declare type GuildIntegrationsUpdateEvent = GenericEvent<'guildIntegrationsUpdate', (utils: GenericUtils, guild: Guild) => CallbackType>;
declare type InvalidatedEvent = GenericEvent<'invalidated', (utils: GenericUtils) => CallbackType>;
declare type InviteCreateEvent = GenericEvent<'inviteCreate', (utils: GenericUtils, invite: Invite) => CallbackType>;
declare type InviteDeleteEvent = GenericEvent<'inviteDelete', (utils: GenericUtils, invite: Invite) => CallbackType>;
declare type MessageEvent = GenericEvent<'message', (utils: GenericUtils, importCommands: ImportCommandsType, message: Message) => CallbackType>;
declare type MessageDeleteEvent = GenericEvent<'messageDelete', (utils: GenericUtils, message: Message) => CallbackType>;
declare type MessageDeleteBulkEvent = GenericEvent<'messageDeleteBulk', (utils: GenericUtils, messages: Collection<Snowflake, Message>) => CallbackType>;
declare type MessageReactionAddEvent = GenericEvent<'messageReactionAdd', (utils: GenericUtils, messageReaction: MessageReaction, user: User) => CallbackType>;
declare type MessageReactionRemoveEvent = GenericEvent<'messageReactionRemove', (utils: GenericUtils, messageReaction: MessageReaction, user: User) => CallbackType>;
declare type MessageReactionRemoveAllEvent = GenericEvent<'messageReactionRemoveAll', (utils: GenericUtils, message: Message) => CallbackType>;
declare type MessageReactionRemoveEmojiEvent = GenericEvent<'messageReactionRemoveEmoji', (utils: GenericUtils, reaction: MessageReaction) => CallbackType>;
declare type MessageUpdateEvent = GenericEvent<'messageUpdate', (utils: GenericUtils, oldMessage: Message, newMessage: Message) => CallbackType>;
declare type PresenceUpdateEvent = GenericEvent<'presenceUpdate', (utils: GenericUtils, oldMember: GuildMember, newMember: GuildMember) => CallbackType>;
declare type RateLimitEvent = GenericEvent<'rateLimit', (utils: GenericUtils, rateLimitData: RateLimitData) => CallbackType>;
export declare type ReadyEvent = GenericEvent<'ready', (utils: GenericUtils) => CallbackType>;
declare type RoleCreateEvent = GenericEvent<'roleCreate', (utils: GenericUtils, role: Role) => CallbackType>;
declare type RoleDeleteEvent = GenericEvent<'roleDelete', (utils: GenericUtils, role: Role) => CallbackType>;
declare type RoleUpdateEvent = GenericEvent<'roleUpdate', (utils: GenericUtils, oldRole: Role, newRole: Role) => CallbackType>;
declare type ShardDisconnectEvent = GenericEvent<'shardDisconnect', (utils: GenericUtils, event: CloseEvent, id: number) => CallbackType>;
declare type ShardErrorEvent = GenericEvent<'shardError', (utils: GenericUtils, error: Error, shardID: number) => CallbackType>;
declare type ShardReadyEvent = GenericEvent<'shardReady', (utils: GenericUtils, id: number, unavailableGuilds?: Set<string>) => CallbackType>;
declare type ShardReconnectingEvent = GenericEvent<'shardReconnecting', (utils: GenericUtils, id: number) => CallbackType>;
declare type ShardResumeEvent = GenericEvent<'shardResume', (utils: GenericUtils, id: number, replayedEvents: number) => CallbackType>;
declare type TypingStartEvent = GenericEvent<'typingStart', (utils: GenericUtils, channel: Channel, user: User) => CallbackType>;
declare type UserUpdateEvent = GenericEvent<'userUpdate', (utils: GenericUtils, oldUser: User, newUser: User) => CallbackType>;
declare type VoiceStateUpdateEvent = GenericEvent<'voiceStateUpdate', (utils: GenericUtils, oldMember: GuildMember, newMember: GuildMember) => CallbackType>;
declare type WarnEvent = GenericEvent<'warn', (utils: GenericUtils, info: string) => CallbackType>;
declare type WebhookUpdateEvent = GenericEvent<'webhookUpdate', (utils: GenericUtils, channel: TextChannel) => CallbackType>;
export declare type EventTypes = ChannelCreateEvent | ChannelDeleteEvent | ChannelPinsUpdateEvent | ChannelUpdateEvent | DebugEvent | DisconnectEvent | EmojiCreateEvent | EmojiDeleteEvent | EmojiUpdateEvent | ErrorEvent | GuildBanAddEvent | GuildBanRemoveEvent | GuildCreateEvent | GuildDeleteEvent | GuildMemberAddEvent | GuildMemberAvailableEvent | GuildMemberRemoveEvent | GuildMembersChunkEvent | GuildMemberSpeakingEvent | GuildMemberUpdateEvent | GuildUnavailableEvent | GuildUpdateEvent | InvalidatedEvent | InviteCreateEvent | InviteDeleteEvent | GuildIntegrationsUpdateEvent | MessageEvent | MessageDeleteEvent | MessageDeleteBulkEvent | MessageReactionAddEvent | MessageReactionRemoveEvent | MessageReactionRemoveAllEvent | MessageReactionRemoveEmojiEvent | MessageUpdateEvent | PresenceUpdateEvent | RateLimitEvent | ReadyEvent | RoleCreateEvent | RoleDeleteEvent | RoleUpdateEvent | ShardDisconnectEvent | ShardErrorEvent | ShardReadyEvent | ShardReconnectingEvent | ShardResumeEvent | TypingStartEvent | UserUpdateEvent | VoiceStateUpdateEvent | WarnEvent | WebhookUpdateEvent;
export {};
